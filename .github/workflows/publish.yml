name: publish

on:
  workflow_dispatch: # Allow manual runs
  push:
    branches: [ master ] # Trigger on pushes to master
  pull_request:
    branches: [ '*' ] # Trigger on pull requests to any branch (for build/test validation)
  release:
    types: [ published ] # Trigger ONLY when a release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh # Use PowerShell for consistency

jobs:
  build_and_pack:
    name: Build and Pack NuGet Packages
    runs-on: ubuntu-latest
    outputs:
      nuget_path: ${{ env.NuGetDirectory }} # Output the path if needed by other jobs (though deploy uses artifacts)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for MinVer to determine version correctly

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        # Optionally specify the SDK version matching your global.json if needed
        # with:
        #   dotnet-version: '9.0.x' # Example

      - name: Restore Dependencies
        run: dotnet restore YTLiveChat.sln

      - name: Build Solution
        run: dotnet build YTLiveChat.sln --configuration Release --no-restore

      # Pack the core library
      - name: Pack Core Library (YTLiveChat)
        run: dotnet pack YTLiveChat/YTLiveChat.csproj --configuration Release --no-build --output ${{ env.NuGetDirectory }}

      # Pack the Dependency Injection library - it should inherit the version via ProjectReference
      - name: Pack DI Extension Library (YTLiveChat.DependencyInjection)
        run: dotnet pack YTLiveChat.DependencyInjection/YTLiveChat.DependencyInjection.csproj --configuration Release --no-build --output ${{ env.NuGetDirectory }}

      - name: List Packages Created # Optional: for debugging workflow runs
        run: Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg | Select-Object FullName, Length

      - name: Upload NuGet Packages Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages # Artifact name containing both packages
          if-no-files-found: error # Fail if no packages were created
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg # Upload all nupkg files from the output directory

  # Deployment job remains largely the same, but depends on the renamed build_and_pack job
  deploy:
    name: Deploy Packages to NuGet.org
    # Run only when a release is published on GitHub
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: [build_and_pack] # Depend on the build and pack job
    environment: # Optional: Define deployment environment if using GitHub Environments for secrets/approvals
      name: nuget.org
      url: https://www.nuget.org/packages/Agash.YTLiveChat # Update URL if needed
    permissions: # Optional: Define least privilege permissions needed
      contents: read # Typically needed to read repo contents if not checking out again
      # id-token: write # Add if using OIDC for NuGet authentication instead of API key

    steps:
      - name: Download NuGet Packages Artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages # Match the artifact name from the build job
          path: ${{ env.NuGetDirectory }}

      - name: List Downloaded Packages # Optional: for debugging workflow runs
        run: Get-ChildItem "${{ env.NuGetDirectory }}" -Filter *.nupkg | Select-Object FullName, Length

      - name: Setup .NET SDK # Setup .NET again in the deploy job
        uses: actions/setup-dotnet@v4
        # Optionally specify the SDK version

      - name: Publish NuGet Packages
        env:
           NUGET_API_KEY: ${{ secrets.NUGET_APIKEY }} # Use the secret for the API key
        run: |
          Get-ChildItem "${{ env.NuGetDirectory }}" -Filter *.nupkg | ForEach-Object {
              Write-Host "Pushing $($_.FullName)..."
              # Push each package found in the directory
              dotnet nuget push $_.FullName --api-key "$env:NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }