name: publish

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ '*' ]
  release:
    types: [ published ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  build_test_and_pack:
    name: Build, Test, and Pack NuGet Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4

      - name: Restore Dependencies
        run: dotnet restore YTLiveChat.sln

      - name: Build Solution
        run: dotnet build YTLiveChat.sln --configuration Release --no-restore
        
      - name: Run Tests for .NET 9.0
        run: dotnet test YTLiveChat.Tests/YTLiveChat.Tests.csproj --configuration Release --framework net9.0 --no-build --logger "trx;LogFileName=test-results-net9.trx"

      - name: Run Tests for .NET 8.0
        run: dotnet test YTLiveChat.Tests/YTLiveChat.Tests.csproj --configuration Release --framework net8.0 --no-build --logger "trx;LogFileName=test-results-net8.trx"
      
      # Optional: Add a step to publish test results if you want them as artifacts or for PR checks
      - name: Upload Test Results
        if: always() # Run this step even if previous steps fail, to upload any partial results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/*.trx' # Path to trx files in the test project's output
          retention-days: 7

      - name: Pack Core Library (YTLiveChat)
        run: dotnet pack YTLiveChat/YTLiveChat.csproj --configuration Release --no-build --output ${{ env.NuGetDirectory }}

      - name: Pack DI Extension Library (YTLiveChat.DependencyInjection)
        run: dotnet pack YTLiveChat.DependencyInjection/YTLiveChat.DependencyInjection.csproj --configuration Release --no-build --output ${{ env.NuGetDirectory }}

      - name: List Packages Created
        run: Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg | Select-Object FullName, Length

      - name: Upload NuGet Packages Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg

  deploy:
    name: Deploy Packages to NuGet.org
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: [build_test_and_pack] # Depend on the combined job
    environment:
      name: nuget.org
      url: https://www.nuget.org/packages/Agash.YTLiveChat
    permissions:
      contents: read
    steps:
      - name: Download NuGet Packages Artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ${{ env.NuGetDirectory }}

      - name: List Downloaded Packages
        run: Get-ChildItem "${{ env.NuGetDirectory }}" -Filter *.nupkg | Select-Object FullName, Length

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4

      - name: Publish NuGet Packages
        env:
           NUGET_API_KEY: ${{ secrets.NUGET_APIKEY }}
        run: |
          Get-ChildItem "${{ env.NuGetDirectory }}" -Filter *.nupkg | ForEach-Object {
              Write-Host "Pushing $($_.FullName)..."
              dotnet nuget push $_.FullName --api-key "$env:NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }